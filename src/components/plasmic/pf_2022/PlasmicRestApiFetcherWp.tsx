// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: rBcULC5Hn8rnDrAaZwq3LA
// Component: fmeRBOtJKP
import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { DataFetcher } from "@plasmicpkgs/plasmic-query"; // plasmic-import: ae7V86eNoXA/codeComponent

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_pf_2022.module.css"; // plasmic-import: rBcULC5Hn8rnDrAaZwq3LA/projectcss
import sty from "./PlasmicRestApiFetcherWp.module.css"; // plasmic-import: fmeRBOtJKP/css

export type PlasmicRestApiFetcherWp__VariantMembers = {};
export type PlasmicRestApiFetcherWp__VariantsArgs = {};
type VariantPropType = keyof PlasmicRestApiFetcherWp__VariantsArgs;
export const PlasmicRestApiFetcherWp__VariantProps =
  new Array<VariantPropType>();

export type PlasmicRestApiFetcherWp__ArgsType = {};
type ArgPropType = keyof PlasmicRestApiFetcherWp__ArgsType;
export const PlasmicRestApiFetcherWp__ArgProps = new Array<ArgPropType>();

export type PlasmicRestApiFetcherWp__OverridesType = {
  pageContainer?: p.Flex<"div">;
  projectsContainer?: p.Flex<"div">;
  projectsFetcher?: p.Flex<typeof DataFetcher>;
  freeBox?: p.Flex<"div">;
  featuredImageFetcher?: p.Flex<typeof DataFetcher>;
  project?: p.Flex<"div">;
  img?: p.Flex<typeof p.PlasmicImg>;
  h1?: p.Flex<"h1">;
  p?: p.Flex<"p">;
  productTypes?: p.Flex<"div">;
  span?: p.Flex<"span">;
};

export interface DefaultRestApiFetcherWpProps {
  className?: string;
}

function PlasmicRestApiFetcherWp__RenderFunc(props: {
  variants: PlasmicRestApiFetcherWp__VariantsArgs;
  args: PlasmicRestApiFetcherWp__ArgsType;
  overrides: PlasmicRestApiFetcherWp__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const currentUser = p.useCurrentUser?.() || {};

  return (
    <React.Fragment>
      {}

      <div className={projectcss.plasmic_page_wrapper}>
        {true ? (
          <div
            data-plasmic-name={"pageContainer"}
            data-plasmic-override={overrides.pageContainer}
            data-plasmic-root={true}
            data-plasmic-for-node={forNode}
            className={classNames(
              projectcss.all,
              projectcss.root_reset,
              projectcss.plasmic_default_styles,
              projectcss.plasmic_mixins,
              projectcss.plasmic_tokens,
              sty.pageContainer
            )}
          >
            <div
              data-plasmic-name={"projectsContainer"}
              data-plasmic-override={overrides.projectsContainer}
              className={classNames(projectcss.all, sty.projectsContainer)}
            >
              <DataFetcher
                data-plasmic-name={"projectsFetcher"}
                data-plasmic-override={overrides.projectsFetcher}
                className={classNames("__wab_instance", sty.projectsFetcher)}
                dataName={"fetchedData" as const}
                errorDisplay={
                  <ph.DataCtxReader>
                    {$ctx => "Error fetching data"}
                  </ph.DataCtxReader>
                }
                headers={{
                  "Content-Type": "application/json",
                  Accept: "application/json"
                }}
                loadingDisplay={
                  <ph.DataCtxReader>{$ctx => "Loading..."}</ph.DataCtxReader>
                }
                method={"GET" as const}
                noLayout={false}
                queryKey={"" as const}
                url={
                  "https://polymessa.com/wp-json/wp/v2/project?per_page=100" as const
                }
              >
                <ph.DataCtxReader>
                  {$ctx =>
                    true
                      ? (() => {
                          try {
                            return $ctx.fetchedData;
                          } catch (e) {
                            if (e instanceof TypeError) {
                              return [];
                            }
                            throw e;
                          }
                        })().map((currentItem, currentIndex) => (
                          <div
                            data-plasmic-name={"freeBox"}
                            data-plasmic-override={overrides.freeBox}
                            className={classNames(projectcss.all, sty.freeBox)}
                            key={currentIndex}
                          >
                            <DataFetcher
                              data-plasmic-name={"featuredImageFetcher"}
                              data-plasmic-override={
                                overrides.featuredImageFetcher
                              }
                              className={classNames(
                                "__wab_instance",
                                sty.featuredImageFetcher
                              )}
                              dataName={"fetchedData" as const}
                              errorDisplay={
                                <ph.DataCtxReader>
                                  {$ctx => "Error fetching data"}
                                </ph.DataCtxReader>
                              }
                              headers={{
                                "Content-Type": "application/json",
                                Accept: "application/json"
                              }}
                              loadingDisplay={
                                <ph.DataCtxReader>
                                  {$ctx => "Loading..."}
                                </ph.DataCtxReader>
                              }
                              method={"GET" as const}
                              noLayout={false}
                              queryKey={"" as const}
                              url={(() => {
                                try {
                                  return `https://polymessa.com/wp-json/wp/v2/media/${currentItem.featured_media}`;
                                } catch (e) {
                                  if (e instanceof TypeError) {
                                    return "https://polymessa.com/wp-json/wp/v2/media/87";
                                  }
                                  throw e;
                                }
                              })()}
                            >
                              <ph.DataCtxReader>
                                {$ctx =>
                                  true ? (
                                    <div
                                      data-plasmic-name={"project"}
                                      data-plasmic-override={overrides.project}
                                      className={classNames(
                                        projectcss.all,
                                        sty.project
                                      )}
                                    >
                                      <p.PlasmicImg
                                        data-plasmic-name={"img"}
                                        data-plasmic-override={overrides.img}
                                        alt={""}
                                        className={classNames(sty.img)}
                                        displayHeight={"auto" as const}
                                        displayMaxHeight={"none" as const}
                                        displayMaxWidth={"100%" as const}
                                        displayMinHeight={"0" as const}
                                        displayMinWidth={"0" as const}
                                        displayWidth={"100%" as const}
                                        loading={"lazy" as const}
                                        src={(() => {
                                          try {
                                            return `https://polymessa.com${$ctx.fetchedData.source_url}`;
                                          } catch (e) {
                                            if (e instanceof TypeError) {
                                              return undefined;
                                            }
                                            throw e;
                                          }
                                        })()}
                                      />

                                      <h1
                                        data-plasmic-name={"h1"}
                                        data-plasmic-override={overrides.h1}
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.h1,
                                          projectcss.__wab_text,
                                          sty.h1
                                        )}
                                      >
                                        {(() => {
                                          try {
                                            return currentItem.title.rendered;
                                          } catch (e) {
                                            if (e instanceof TypeError) {
                                              return "Enter some text";
                                            }
                                            throw e;
                                          }
                                        })()}
                                      </h1>

                                      <p
                                        data-plasmic-name={"p"}
                                        data-plasmic-override={overrides.p}
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.p,
                                          projectcss.__wab_text,
                                          sty.p
                                        )}
                                      >
                                        <div
                                          className={
                                            projectcss.__wab_expr_html_text
                                          }
                                          dangerouslySetInnerHTML={{
                                            __html: (() => {
                                              try {
                                                return currentItem.acf
                                                  .description;
                                              } catch (e) {
                                                if (e instanceof TypeError) {
                                                  return "Enter some text";
                                                }
                                                throw e;
                                              }
                                            })()
                                          }}
                                        />
                                      </p>

                                      {true ? (
                                        <div
                                          data-plasmic-name={"productTypes"}
                                          data-plasmic-override={
                                            overrides.productTypes
                                          }
                                          className={classNames(
                                            projectcss.all,
                                            sty.productTypes
                                          )}
                                        >
                                          {(() => {
                                            try {
                                              return currentItem.acf.product;
                                            } catch (e) {
                                              if (e instanceof TypeError) {
                                                return [];
                                              }
                                              throw e;
                                            }
                                          })().map(
                                            (
                                              currentProductType,
                                              currentProductTypeIndex
                                            ) => (
                                              <span
                                                data-plasmic-name={"span"}
                                                data-plasmic-override={
                                                  overrides.span
                                                }
                                                className={classNames(
                                                  projectcss.all,
                                                  projectcss.span,
                                                  projectcss.__wab_text,
                                                  sty.span
                                                )}
                                                key={currentProductTypeIndex}
                                              >
                                                {(() => {
                                                  try {
                                                    return `${currentProductType}, `;
                                                  } catch (e) {
                                                    if (
                                                      e instanceof TypeError
                                                    ) {
                                                      return "Enter some text";
                                                    }
                                                    throw e;
                                                  }
                                                })()}
                                              </span>
                                            )
                                          )}
                                        </div>
                                      ) : null}
                                    </div>
                                  ) : null
                                }
                              </ph.DataCtxReader>
                            </DataFetcher>
                          </div>
                        ))
                      : null
                  }
                </ph.DataCtxReader>
              </DataFetcher>
            </div>
          </div>
        ) : null}
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  pageContainer: [
    "pageContainer",
    "projectsContainer",
    "projectsFetcher",
    "freeBox",
    "featuredImageFetcher",
    "project",
    "img",
    "h1",
    "p",
    "productTypes",
    "span"
  ],
  projectsContainer: [
    "projectsContainer",
    "projectsFetcher",
    "freeBox",
    "featuredImageFetcher",
    "project",
    "img",
    "h1",
    "p",
    "productTypes",
    "span"
  ],
  projectsFetcher: [
    "projectsFetcher",
    "freeBox",
    "featuredImageFetcher",
    "project",
    "img",
    "h1",
    "p",
    "productTypes",
    "span"
  ],
  freeBox: [
    "freeBox",
    "featuredImageFetcher",
    "project",
    "img",
    "h1",
    "p",
    "productTypes",
    "span"
  ],
  featuredImageFetcher: [
    "featuredImageFetcher",
    "project",
    "img",
    "h1",
    "p",
    "productTypes",
    "span"
  ],
  project: ["project", "img", "h1", "p", "productTypes", "span"],
  img: ["img"],
  h1: ["h1"],
  p: ["p"],
  productTypes: ["productTypes", "span"],
  span: ["span"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  pageContainer: "div";
  projectsContainer: "div";
  projectsFetcher: typeof DataFetcher;
  freeBox: "div";
  featuredImageFetcher: typeof DataFetcher;
  project: "div";
  img: typeof p.PlasmicImg;
  h1: "h1";
  p: "p";
  productTypes: "div";
  span: "span";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicRestApiFetcherWp__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicRestApiFetcherWp__VariantsArgs;
    args?: PlasmicRestApiFetcherWp__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicRestApiFetcherWp__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicRestApiFetcherWp__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicRestApiFetcherWp__ArgProps,
          internalVariantPropNames: PlasmicRestApiFetcherWp__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicRestApiFetcherWp__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "pageContainer") {
    func.displayName = "PlasmicRestApiFetcherWp";
  } else {
    func.displayName = `PlasmicRestApiFetcherWp.${nodeName}`;
  }
  return func;
}

export const PlasmicRestApiFetcherWp = Object.assign(
  // Top-level PlasmicRestApiFetcherWp renders the root element
  makeNodeComponent("pageContainer"),
  {
    // Helper components rendering sub-elements
    projectsContainer: makeNodeComponent("projectsContainer"),
    projectsFetcher: makeNodeComponent("projectsFetcher"),
    freeBox: makeNodeComponent("freeBox"),
    featuredImageFetcher: makeNodeComponent("featuredImageFetcher"),
    project: makeNodeComponent("project"),
    img: makeNodeComponent("img"),
    h1: makeNodeComponent("h1"),
    p: makeNodeComponent("p"),
    productTypes: makeNodeComponent("productTypes"),
    span: makeNodeComponent("span"),

    // Metadata about props expected for PlasmicRestApiFetcherWp
    internalVariantProps: PlasmicRestApiFetcherWp__VariantProps,
    internalArgProps: PlasmicRestApiFetcherWp__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicRestApiFetcherWp;
/* prettier-ignore-end */
