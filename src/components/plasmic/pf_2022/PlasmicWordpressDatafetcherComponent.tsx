// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: rBcULC5Hn8rnDrAaZwq3LA
// Component: E9s4EkoeoO
import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Button from "../../Button"; // plasmic-import: JlI4-MfTpdG/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_pf_2022.module.css"; // plasmic-import: rBcULC5Hn8rnDrAaZwq3LA/projectcss
import sty from "./PlasmicWordpressDatafetcherComponent.module.css"; // plasmic-import: E9s4EkoeoO/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: 9iZxF3nBfx-/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: aTfaM_Wwp9V/icon

export type PlasmicWordpressDatafetcherComponent__VariantMembers = {};
export type PlasmicWordpressDatafetcherComponent__VariantsArgs = {};
type VariantPropType = keyof PlasmicWordpressDatafetcherComponent__VariantsArgs;
export const PlasmicWordpressDatafetcherComponent__VariantProps =
  new Array<VariantPropType>();

export type PlasmicWordpressDatafetcherComponent__ArgsType = {};
type ArgPropType = keyof PlasmicWordpressDatafetcherComponent__ArgsType;
export const PlasmicWordpressDatafetcherComponent__ArgProps =
  new Array<ArgPropType>();

export type PlasmicWordpressDatafetcherComponent__OverridesType = {
  root?: p.Flex<"div">;
  freeBox?: p.Flex<"div">;
  button?: p.Flex<typeof Button>;
};

export interface DefaultWordpressDatafetcherComponentProps {
  className?: string;
}

function PlasmicWordpressDatafetcherComponent__RenderFunc(props: {
  variants: PlasmicWordpressDatafetcherComponent__VariantsArgs;
  args: PlasmicWordpressDatafetcherComponent__ArgsType;
  overrides: PlasmicWordpressDatafetcherComponent__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const currentUser = p.useCurrentUser?.() || {};

  return (
    <React.Fragment>
      {}

      <div className={projectcss.plasmic_page_wrapper}>
        {true ? (
          <div
            data-plasmic-name={"root"}
            data-plasmic-override={overrides.root}
            data-plasmic-root={true}
            data-plasmic-for-node={forNode}
            className={classNames(
              projectcss.all,
              projectcss.root_reset,
              projectcss.plasmic_default_styles,
              projectcss.plasmic_mixins,
              projectcss.plasmic_tokens,
              sty.root
            )}
          >
            <div
              data-plasmic-name={"freeBox"}
              data-plasmic-override={overrides.freeBox}
              className={classNames(projectcss.all, sty.freeBox)}
            />

            <Button
              data-plasmic-name={"button"}
              data-plasmic-override={overrides.button}
              className={classNames("__wab_instance", sty.button)}
            />
          </div>
        ) : null}
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "freeBox", "button"],
  freeBox: ["freeBox"],
  button: ["button"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  freeBox: "div";
  button: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicWordpressDatafetcherComponent__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicWordpressDatafetcherComponent__VariantsArgs;
    args?: PlasmicWordpressDatafetcherComponent__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit< // Specify variants directly as props
    PlasmicWordpressDatafetcherComponent__VariantsArgs,
    ReservedPropsType
  > &
    // Specify args directly as props
    Omit<PlasmicWordpressDatafetcherComponent__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicWordpressDatafetcherComponent__ArgProps,
          internalVariantPropNames:
            PlasmicWordpressDatafetcherComponent__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicWordpressDatafetcherComponent__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicWordpressDatafetcherComponent";
  } else {
    func.displayName = `PlasmicWordpressDatafetcherComponent.${nodeName}`;
  }
  return func;
}

export const PlasmicWordpressDatafetcherComponent = Object.assign(
  // Top-level PlasmicWordpressDatafetcherComponent renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    button: makeNodeComponent("button"),

    // Metadata about props expected for PlasmicWordpressDatafetcherComponent
    internalVariantProps: PlasmicWordpressDatafetcherComponent__VariantProps,
    internalArgProps: PlasmicWordpressDatafetcherComponent__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "JVZ WP API test",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicWordpressDatafetcherComponent;
/* prettier-ignore-end */
